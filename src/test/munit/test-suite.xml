<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
	<munit:config name="test-suite.xml" doc:name="MUnit configuration" />
	
	<configuration-properties doc:name="Configuration properties" doc:id="3f20e570-0dc0-4628-9bae-fc20b8cd5b97" file="mule.test.properties" />
	
	<munit:before-test name="test-suiteBefore_Test"
		description="Before tests actions" doc:id="7f8facb1-95ae-4456-9448-faf3a3a89dc9">
		<ee:transform doc:name="Prepare testing data"
			doc:id="7c253cc1-4a09-4e71-a9c5-74e5dbbf5848">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="testAccounts" ><![CDATA[%dw 2.0
output application/java
---
[{
	Description: "test description1",
	Name: "TestAccount " ++ randomInt(100000),
	Industry: "Education",
	NumberOfEmployees: 150010
},
{
	Description: "test description2",
	Name: "TestAccount " ++ randomInt(100000),
	Industry: "Energy",
	NumberOfEmployees: 100
},
{
	Description: "test description3",
	Name: "TestAccount " ++ randomInt(100000),
	Industry: "Education",
	NumberOfEmployees: 150001
}
]
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<salesforce:create type="Account"
			doc:name="Create Accounts in Salesforce" doc:id="d62c8e61-71a7-43f3-8aa0-b4b5cb5359a4"
			config-ref="Salesforce_Sfdc_config" >
			<salesforce:records ><![CDATA[#[vars.testAccounts]]]></salesforce:records>
		</salesforce:create>
		<set-variable value="#[payload map ($.id)]" doc:name="Store IDs to variable sfdcAIds" doc:id="623a0d4f-c873-45e6-a7ee-89bc1e194721" variableName="sfdcAIds" />
		<db:insert doc:name="Insert test account to DB" doc:id="69a7e69c-e1ab-4345-9ef1-cc401f769907" config-ref="Database_Config">
			<db:sql >INSERT INTO Account (
								Id,
								Description,
								Industry,
								Name,
								NumberOfEmployees
								) VALUES (
								UUID(),
								:description,
								:education,
								:name,
								:employees
								)</db:sql>
			<db:input-parameters ><![CDATA[#[{
	'description': vars.testAccounts[2].Description,
	'education': vars.testAccounts[2].Education,
	'name': vars.testAccounts[2].Name,
	'employees': vars.testAccounts[2].NumberOfEmployees
}]]]></db:input-parameters>
		</db:insert>
		<munit-tools:mock-when doc:name="Mock email processor to avoid sending email" doc:id="17ab3357-3f08-4456-9f14-c41c281e06f1" processor="email:send">
				<munit-tools:then-return />
			</munit-tools:mock-when>
	</munit:before-test>
	<munit:test name="test-suite-businesslogicFlowTest" description="Test" doc:id="4ffcda90-21bf-4cd4-9460-09cf6ca578e5" >
		<munit:execution >
			<flow-ref doc:name="Reference to businessLogicFlow" doc:id="3e0601a1-1b47-4974-83b0-8d30726559dd" name="businessLogicFlow"/>
			<scripting:execute doc:name="Sleep for 10s until the processing is completed" doc:id="b09fe305-3000-4571-b824-8b555395ccb7" engine="groovy">
				<scripting:code >sleep(10000)</scripting:code>
			</scripting:execute>
			<flow-ref doc:name="Reference to insertTestSubFlow" doc:id="646a758d-9c2b-4aa8-b747-68fef943494e" name="insertTestSubFlow"/>
			<flow-ref doc:name="Reference to updateTestSubFlow" doc:id="bb921782-20b4-41df-8aeb-1acb94826e02" name="updateTestSubFlow"/>
		</munit:execution>
	</munit:test>
	<sub-flow name="insertTestSubFlow" doc:id="bb629d7e-cfcf-4909-9671-b9d75fbbcdc7" >
		<db:select doc:name="Select account, which was not migrated" doc:id="95812427-fc29-4d56-9dbf-e1de360077c7" config-ref="Database_Config">
				<db:sql>SELECT Id FROM Account WHERE Name = :name</db:sql>
			<db:input-parameters ><![CDATA[#[{
	'name' : vars.testAccounts[1].Name
}]]]></db:input-parameters>
			</db:select>
		<set-variable value="#[sizeOf(payload)]" doc:name=" Set Variable for assertion" doc:id="95c89be7-1756-40fd-b198-2b1334bf6979" variableName="resultSize" />
		<munit-tools:assert-that doc:name="Assert that we didn't find Account" doc:id="1e559409-a86b-47b9-bb44-cbcac54c4ade" expression="#[vars.resultSize]" is="#[MunitTools::equalTo(0)]" message="Account was found!"/>
		<db:select doc:name="Select account, which was migrated" doc:id="8e0848fa-faf5-4737-bedc-bc758de46d3f" config-ref="Database_Config">
				<db:sql>SELECT Id FROM Account WHERE Name = :name</db:sql>
			<db:input-parameters ><![CDATA[#[{
	'name' : vars.testAccounts[0].Name
}]]]></db:input-parameters>
			</db:select>
		<set-variable value="#[sizeOf(payload)]" doc:name="Set Variable with result size for assertion" doc:id="b485fb70-e4a8-4f97-9da9-e0ace1a236c9" variableName="resultSize" />
		<munit-tools:assert-that doc:name="Assert that we found migrated Account" doc:id="a8f4453a-10c6-4508-8ecf-64cc08e6129c" expression="#[vars.resultSize]" is="#[MunitTools::equalTo(1)]" message="Migrated account was not found!"/>
		<db:delete doc:name="Delete migrated account" doc:id="d6727608-7a35-4f2c-97f2-6924440fa926" config-ref="Database_Config">
				<db:sql>DELETE FROM Account WHERE Name = :name</db:sql>
			<db:input-parameters ><![CDATA[#[{
	'name' : vars.testAccounts[0].Name
}]]]></db:input-parameters>
			</db:delete>
	</sub-flow>
	<sub-flow name="updateTestSubFlow" doc:id="eb2c1733-e157-4563-9321-829a688c161f" >
		<db:select doc:name="Select account, which was updated" doc:id="8e0848fa-faf5-4737-bedc-bc758de46d3f" config-ref="Database_Config">
			<db:sql>SELECT Id, NumberOfEmployees FROM Account WHERE Name = :name</db:sql>
			<db:input-parameters ><![CDATA[#[{
	'name' : vars.testAccounts[2].Name
}]]]></db:input-parameters>
		</db:select>
		<munit-tools:assert-that doc:name="Assert that Number of employees was updated" doc:id="798bd6c1-88b2-4cc9-916d-ed7cb4adc0c8" expression="#[payload[0].NumberOfEmployees]" is="#[MunitTools::equalTo(150001)]" message="Number of employees was not updated!"/>
		<db:delete doc:name="Delete account, which was updated" doc:id="d6727608-7a35-4f2c-97f2-6924440fa926" config-ref="Database_Config">
			<db:sql>DELETE FROM Account WHERE Name = :name</db:sql>
			<db:input-parameters ><![CDATA[#[{
	'name' : vars.testAccounts[2].Name
}]]]></db:input-parameters>
		</db:delete>
	</sub-flow>
	<munit:after-test name="test-suiteAfter_Test" description="After tests actions" doc:id="bd172cdc-0aa1-45a6-a1fc-c70ba5eb4f8b" >
		<salesforce:delete doc:name="Delete test accounts in SFDC" doc:id="788956ca-8ada-49c2-a3f7-7eb367e735b4" config-ref="Salesforce_Sfdc_config">
				<salesforce:delete-ids><![CDATA[#[vars.sfdcAIds]]]></salesforce:delete-ids>
			</salesforce:delete>
	</munit:after-test>


</mule>